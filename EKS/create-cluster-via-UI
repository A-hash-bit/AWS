# https://github.com/Bhoopesh123/k8s-concepts  (+ start/stop ec2 with lambda)
1 Go to EKS 
2 Give name, select version
- Create an eks-cluster-role  - IAM - choose "AWS service" -choose EKS (EKS-Cluster) next (Give name to role)
3 add role eks-cluster-role while creating EKS
4 Don't do anything in networking (can use default),but need atleast 2 public subnets, can skip security group (EKS will create a SG for control plane)
- If using fargate as compute create cluster(control plane) in public subnets only, min 2 subnets. can skip security group (EKS will create a SG for control plane)
5 select public/private or private endpoint (with public you don't get to setup promethheus by AWS)  -next
6 (Add ONs) kubeproxy, coreDNS, aws VPC CNI + Amazon EKS Pod Identity Agent (select)
7. Next & review & create.
* Attach nodegroup
  1. Go inside of cluster
  2. Give name
  - Create Node IAM role - IAM - choose "AWS service" -choose ec2 -add AmazonEKSWorkerNodePolicy, AmazonEC2ContainerRegistryReadOnly, AmazonEKS_CNI_Policy 
    next (Give name to role) done
  3. choose the Node group role
  4. optional to choose lanch templates, k8s lables, taints etc.. next
  5. Select compute & Scaling configuration (AMI, Instance type, Disk size, scaling config,)
    - max No. of pod on one node depends upon instance type.
    - select no./percentage of nodes can be unavailable while node group upgrade.
  6. optional select subnets. and Create.
  7. aws eks list-clusters
* Attach fargate (Farget is serverless computing for containers, offers auto scaling & high availability)
- Farget profile is bridge between EKS & Fargate, farget profile tells EKS which containers can run on farget.
- Farget needs at least 2 private subnets to launch. And one NAT gateway for each subnet.
- Farget needs IAM Role with -EKS-farget pod and policy "AmazonEKSFargatePodExecutionRolePolicy." - So EKS can run pods on fargate(role used by fargate profile)
1. Go to cluster--> compute--> Fargate--> create/configure fargate profile - give name, add IAM role(AmazonEKSFargatePodExecutionRolePolicy)
2. create namespace/s (demo, kube-system + add lable (k8s-app:core-dns))
 * EKS use fargate profile to create/manages farget cluster.
3. check core dns pod/deploymet (if pending) try -kubectl rollout restart -n kube-system deployment coredns

* How to connect to eks cluster
    1.Install aws cli (if not present)
    2. aws configure 
    3. aws sts get-caller-identity
    4. aws eks --region <region> update-kubeconfig --name eks-first-clusterkubectl config get-contexts
    5. kubectl config get-contexts   (* means current context)
    6. kubectl config use-context <context-name> (if multiple contexts present)
Run a sample workload
  - install kubectl
  - kubectl run my-nginx --image=nginx

# NOTES:
1.Maximum number of Pods:
  Since each Pod is assigned its own IP address, the number of IP addresses supported by an instance type is a factor in determining the number of Pods that can 
  run on the instance. To manually determine how many Pods an instance type supports
- https://docs.aws.amazon.com/eks/latest/userguide/choosing-instance-type.html#determine-max-pods
2. Number of instances in a node group:
   In general, fewer, larger instances are better, especially if you have a lot of Daemonsets. Each instance requires API calls to the API server, 
   so the more instances you have, the more load on the API server.
    
